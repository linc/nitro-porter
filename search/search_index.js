var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Nitro Porter \u2014 free your community!","text":"<p>Nitro Porter is the only multi-platform community migration tool.</p>"},{"location":"index.html#target-software-supported","title":"Target software supported","text":"<p>Nitro Porter can currently migrate your community to these platforms:</p> <p> </p>"},{"location":"index.html#source-software-supported","title":"Source software supported","text":"<p>Nitro Porter can migrate your community away from these platforms:</p> <p> </p> <ul> <li>...and MORE!</li> </ul>"},{"location":"index.html#what-data-gets-migrated","title":"What data gets migrated?","text":"<p>All sources &amp; targets support migrating:</p> <ul> <li>users &amp; roles</li> <li>discussions (or threads)</li> <li>posts (or comments)</li> <li>categories (or subforums, channels, etc.)</li> </ul> <p>Beyond that, each supports different types of data depending on feature availability, extension choice, and maturity of the source/target package. These include things like badges, reactions, bookmarks, and polls.</p> <p>Both the source and target must support a data type for it to transfer!</p> <p>Nitro Porter never transfers permissions. It's not safe to do so automatically due to variations in how platforms implement them. You will always need to reassign permissions after a migration.</p>"},{"location":"contribute.html","title":"Contribute","text":""},{"location":"contribute.html#how-to-contribute-to-nitro-porter","title":"How to Contribute to Nitro Porter","text":"<p>In ascending order of effort:</p>"},{"location":"contribute.html#send-data","title":"Send data!","text":"<p>We greatly appreciate donated data from existing forums to improve the migration and its testing (using partial, anonymized records). A complete database dump is best way to do this. We protect privacy, but you're welcome to anonymize personally-identifiable information first. Willing to sign an extremely narrow NDA for the purpose if necessary. Contact lincoln@icrontic.com.</p>"},{"location":"contribute.html#report-a-problem","title":"Report a problem","text":"<p>Start a discussion if you've hit a problem, including as much detail as possible and any error message or logs available. We don't currently maintain a formal issue tracker.</p>"},{"location":"contribute.html#report-a-success","title":"Report a success!","text":"<p>Did you successfully use Nitro Porter? Start a discussion to tell us all about it! What platforms were you migrating between and how much data was involved? Was it confusing at all?</p>"},{"location":"contribute.html#submit-a-fix-or-improvement","title":"Submit a fix or improvement","text":"<p>Send a pull request with a proposed fix! It's greatly appreciated. Please document your understanding of the change, it makes review much easier! Try using conventional commits for a nicer changelog.</p>"},{"location":"contribute.html#add-support-for-a-new-source-or-target","title":"Add support for a new source or target","text":"<p>Check the developer guide for info on extending Nitro Porter to support a new source or target. It's pretty straightforward! We'll help clean it up if you run into challenges, just get the first draft up in a PR.</p>"},{"location":"contribute.html#work-on-core-maintenance","title":"Work on core maintenance","text":"<p>Check the maintainer guide for doing advanced work on the core of this project. It currently needs integration tests setup and could use a number of additional database connectors configured. More aspirations are articulated in the informal roadmap. If you're taking on this level of work there are higher expectations, but Linc is happy to help guide.</p>"},{"location":"develop.html","title":"Developer Guide","text":"<p>Nitro Porter works in this order:</p> <ol> <li>The Source package translates the data to the intermediary \"porter format\" (see below). These are new database tables with the prefix <code>PORT_</code>.</li> <li>The Target package translates the data to the final platform format. These can be existing tables from an installation, or it will create them new using the information provided.</li> <li>If a Postscript file with the same name as the Target exists, it runs last. This is for doing calculations that require the data to have been fully transferred already, for example generating data that wasn't ever in the Source.</li> </ol> <p>The <code>Migration</code> is a process model that gets passed between every step in the process. It's instantiated as <code>$port</code> throughout the code.</p> <p>Use its <code>comment()</code> method for logging. Open <code>porter.log</code> in your favorite log reader for realtime feedback.</p>"},{"location":"develop.html#porter-format","title":"Porter Format","text":"<p>Nitro Porter uses a \"porter format\" roughly analogous to the database design of Vanilla Forums.  That means all sources translate to Vanilla, and all targets translate from Vanilla. Doing this alleviates multiple challenges.</p> <p>First, imagine 50 sources and 50 targets. Direct migrations would create exponential complexity (50:50 = 2500 possible paths). By using a dedicated intermediary, complexity is significantly constrained (50:1 and 1:50, so that only 100 paths are possible).</p> <p>Second, many forum database designs are difficult to interpret and/or very strict in their data structure.  Vanilla's is fairly sensible and serves as a good reference. It was also designed for easy import.</p> <p>Third, Nitro Porter's origin is as a Vanilla migration tool, so it preserves backwards compatibility for the original sources.</p>"},{"location":"develop.html#considerations-regarding-porter-format","title":"Considerations regarding Porter Format","text":"<p>One common issue with this Porter Format is that the original post's body is attached directly to the discussion record. A majority of forums instead associate a generic post/comment record as the \"first\", and the discussion record contains only the title.  Nitro Porter uses the <code>getDiscussionBodyMode()</code> method to skip the overhead of doing this conversion if both the source and target use this alternative structure.</p> <p>Private messages in Vanilla function as a discussion with an allowlist of participants.  There is no consideration of when a user was added to a private message chain. It does not support PM organization in any way.</p>"},{"location":"develop.html#add-a-new-source","title":"Add a new Source","text":"<p>New sources will be automatically detected at runtime and added as options.</p> <ol> <li>Copy and rename <code>src/Source/Example.php</code>.</li> <li>Edit the <code>SUPPORTED</code> data array, following the inline comments.</li> <li>The basic types of data are stubbed out, one per method. Follow the inline docs.</li> </ol> <p>Source packages are invoked by their <code>run()</code> method. It must call any methods you add in the order you want.</p> <p>Typically, Sources do NOT reformat user generated content (UGC) and simply label how it is formatted on the relevant records (e.g. setting <code>Comment.Format</code> to 'BBCode' or 'HTML').</p>"},{"location":"develop.html#maps-and-filters","title":"Maps and filters","text":"<p>Use a <code>$map</code> array to directly translate a column name in one database to another. Need the data transformed? You can use a function. Pass an array like <code>['Column' =&gt; 'Name', 'Filter' =&gt; 'HTMLDecoder']</code> and the <code>Name</code> column's value will be passed to the function <code>HTMLDecoder()</code> (along with the rest of the data in the row) for manipulation and the return value will be stored instead of the original. Use the <code>src/Functions/filter.php</code> for adding new filters.</p>"},{"location":"develop.html#using-export","title":"Using export()","text":"<p>The <code>Migration::export()</code> call is what does the data transfer. The <code>$query</code> parameter must at least select all the columns in the <code>$map</code> array for it to work. Use the table prefix <code>:_</code> for it to be dynamically replaced per the user's input.</p>"},{"location":"develop.html#requiring-tables-and-columns","title":"Requiring tables and columns","text":"<p>You can use the <code>$sourceTables</code> property to require certain tables and columns in the source database, but it's optional.</p>"},{"location":"develop.html#add-a-new-target","title":"Add a new Target","text":"<ol> <li>Copy and rename <code>src/Target/Example.php</code>.</li> <li>Edit the <code>SUPPORTED</code> data array, following the inline comments.</li> <li>The basic types of data are stubbed out, one per method. Follow the inline docs.</li> </ol> <p>Target packages first have their <code>validate()</code> method called, then their <code>run()</code> method.</p> <p>To confirm an optional data type exists before importing it, use <code>targetExists()</code> on the <code>Migration</code>.</p> <p>It is often necessary to reformat user generated content (UGC), like comments, during the import. See the <code>Formatter</code> class.</p>"},{"location":"develop.html#verify-source-support-for-each-feature","title":"Verify source support for each feature","text":"<p>It's not safe to assume every <code>PORT_</code> table will be present because not all source packages provide all types of feature data.</p> <p>These tables should always be present: <code>PORT_User</code>, <code>PORT_Discussion</code>, <code>PORT_Comment</code>, and <code>PORT_Category</code>.</p> <p>For all others, check if the table exists. Example:</p> <pre><code>        // Verify support.\n        if (!$ex-&gt;targetExists('PORT_FeatureName')) {\n            $ex-&gt;comment('Skipping import: FeatureName (Source lacks support)');\n            return;\n        }\n</code></pre> <p>Generally tables come in bundles. For instance, there's little use for <code>PORT_Role</code> if <code>PORT_UserRole</code> is not also present. Checking for one is usually sufficient.</p>"},{"location":"develop.html#using-import","title":"Using import()","text":"<p>The <code>import()</code> method works a bit more cleanly than the <code>export()</code> method. It takes a map array, but also accepts a built SQL statement rather than a query string. It requires defining the target database table structure, and separates filters into their own array for clarity. Use <code>$ex-&gt;dbImport()</code> to build the SQL statement.</p> <p>If a column isn't present in the structure passed to <code>import()</code>, it will be ignored entirely.</p>"},{"location":"develop.html#using-a-postscript","title":"Using a Postscript","text":"<p>Simply add a new PHP class to the <code>src/Postscript</code> folder with the same name as the Target and a method named <code>run()</code>. It will automatically run after the import. Its <code>storage</code> property will get set with the database connection automatically.</p>"},{"location":"develop.html#writing-integration-tests","title":"Writing integration tests","text":""},{"location":"develop.html#create-a-schema-migration","title":"Create a schema migration","text":"<p>Refer to the Phinx docs for creating schema migrations for integration tests.</p> <p>To create a schema migration from an existing database (rather than hand-coding it from scratch), you need to also use Cake. (This works because Phinx is a spin-off project from Cake, so the framework creates compatible migrations in this scenario.)</p> <ol> <li>Create a new Cake project: <code>composer create-project --prefer-dist cakephp/app:~4.0 some_folder</code></li> <li>Add the database creds in: <code>path_to/some_folder/config/app_local.php</code></li> <li>Run a Cake snapshot: <code>path_to/some_folder/bin/cake bake migration_snapshot SomeName</code></li> <li>Copy the new file created in <code>path_to/some_folder/config/Migrations</code> to Porter's test folder structure in <code>tests/integration/migrations/{PackageName}</code>.</li> </ol> <p>From there, you can edit it and refer to it like other integration tests.</p>"},{"location":"develop.html#working-with-database-connections","title":"Working with database connections","text":"<p>Nitro Porter uses the Laravel Illuminate database driver. Refer to its documentation for help.</p> <p>While Nitro Porter reuses an existing database connection wherever possible, it defaults to using an unbuffered query for speed, and it will often be advisable to use the driver's <code>cursor()</code> method to stream the results.</p> <p>You need a second, separate database connection to do other queries while unbuffered results are streaming. The streaming connection is effectively mid-query. While this rarely comes up in Source packages since they are simply dumping information and the Target package usually abstracts away much of this work, it can get tricky when complex Postscript operations are necessary. Refer to the <code>Flarum</code> Postscript for examples.</p>"},{"location":"develop.html#non-mysql-help","title":"Non-MySQL help","text":""},{"location":"develop.html#mssql-conversions","title":"MSSQL conversions","text":"<p>If you need to migrate from MSSQL with a <code>.bak</code> file (e.g. from AspPlayground) and you're working on an M1 Macbook Pro, this guide will help.</p>"},{"location":"domain.html","title":"Domain Guide","text":"<p>As we move to a domain-driven model, these are core terms to help you understand the application.</p>"},{"location":"domain.html#primary-domain-terms","title":"Primary Domain Terms","text":"<p>Ordered logically to build a baseline understanding of the domain.</p> Package A file containing a migration definition. Source A package for the software we are exporting (leaving). Target A package for the software we are importing (moving to). Storage A category of data source engine, like a database. Connection The access credentials and address of a data source OR the active connection to one. Porter [Format|Storage] Nitro Porter's intermediary data format that sits between the Source and Target. Export Transferring data from its Source Storage to Porter Storage. Import Transferring data from Porter Storage to its Target Storage. Input The read-only data storage/connection for an Export or Import that contains/accesses the origin data being read (defined by a Source or Porter). Output The write-enabled data storage/connection for an Export or Import that contains/accesses the transformed data being written (defined by Porter or a Target). Postscript Package of \"build\" steps to calculate data required by (but not Imported to) the Target platform. Request A generic set of instructions for any migration (or subset thereof). Migration Fulfills a Request to transform &amp; transfer data using an Export, Import, &amp; Postscript (or any subset thereof). (May also refer to a \"database schema migration\", an industry term for altering database schema in a reversible way  using coded definitions, done with the library `Phinx` in Nitro Porter's automated tests.)"},{"location":"domain.html#domain-diagram","title":"Domain Diagram","text":""},{"location":"domain.html#porter-format-terms","title":"Porter Format Terms","text":"<p>Because every platform uses its own nomenclature, it's important to standardize within Nitro Porter for clarity. We use terms adopted by Vanilla Forums, the database structure Porter Format is based on. Bold items are considered 'core' data that all packages should support if possible.</p>"},{"location":"domain.html#user-data","title":"User data","text":"<ul> <li>Users: Anyone who logs in.</li> <li>Roles: Users may be assigned one or more.</li> <li>Avatars: User image.</li> <li>Badges: User awards.</li> <li>Ranks: Hierarchical pseudo-roles, typically automated.</li> <li>Bookmarks: Discussions a user has saved for later.</li> </ul>"},{"location":"domain.html#content","title":"Content","text":"<ul> <li>Discussions: A thread or topic of discussion.</li> <li>Comments: Responses in a Discussion.</li> <li>Categories: Hierarchy of discussion topics or areas.</li> <li>Tags: Non-hierarchical labels for discussions.</li> <li>Reactions: Emoji / image-based click-replies.</li> <li>Attachments: Files associated with a discussion or comment.</li> <li>Polls: Survey question that users may vote on.</li> <li>Private Messages: A private conversation separate from discussions, aka \"Direct Message (DM)\".</li> <li>User Wall: Shared content associated with a single user's profile.</li> <li>User Notes: Private content associated with a user, usually by an admin.</li> </ul>"},{"location":"domain.html#secondary-domain-terms-tech-glossary","title":"Secondary Domain Terms &amp; Tech Glossary","text":"<p>Ordered alphabetically for reference.</p> Bundle Manages a Parser for the library `s9e\\TextFormatter`. Command A instructions sent via Command Line Interface (CLI) to be converted to a Request. Config An entity managing the application configuration, derived from `config.php` (or `config-sample.php`). The Config may supplement a Command with additional information when building a Request. Connection Manager Manages a data Connection based on the library `Illuminate\\Database`. E2E \"End-To-End\", a type of automated testing the covers the entire request lifecycle (input to output).  In most Web apps, this means testing HTML or Javascript-based interactions. In Nitro Porter, this is executing a full migration request (including CLI output &amp; logging). ETL \"Extract, Transform, &amp; Load\", the sequence of a typical data pipeline. I believe its connotation is reductive in the context of user-generated content, but you could think of Porter as \"composable ETLs in a tailored trenchcoat\" if it's helpful. Filter Used in Packages to transform individual data values mid-migration. Map Used in Packages to assign values between keys (Source to Porter, or Porter to Target). Parser Custom formatting instructions for the library `s9e\\TextFormatter`. Seed Mock data for an automated test. Structure A data structure, like a database table schema (or an entire database), including its constraints (like types, size, keys, and not-null flags). UGC \"User-Generated Content\" is anything a non-admin user has created, like the content of a post."},{"location":"guide.html","title":"User Guide","text":""},{"location":"guide.html#requirements","title":"Requirements","text":"<p>You need:</p> <ul> <li>PHP 8.3+</li> <li>MariaDB (or whichever databases your platforms require)</li> <li>PHP's PDO driver for your data sources (probably MySQL or PostgreSQL).</li> <li>256MB of memory allocated to PHP</li> </ul> <p>Nitro Porter will set PHP's memory limit to 256MB. If it's unable to do so, it may suffer performance issues or generate errors. For small forums, you may be able to safely reconfigure it to 128MB or lower.</p> <p>A quick way to get all of the above would be installing MAMP or XAMPP on your laptop. The longer way, if you're doing this often or have huge datasets, is to follow my PHP localhost guide for Mac.</p>"},{"location":"guide.html#installation","title":"Installation","text":"<ol> <li>Get Composer.</li> <li>Make sure Composer is in your PATH.</li> <li><code>composer global require \"prosembler/nitro-porter\"</code>.</li> <li>Go to <code>prosembler/nitro-porter</code> within your Composer directory.</li> <li>To do this on MacOS: <code>cd ~/.composer/vendor/prosembler/nitro-porter</code></li> <li>Copy <code>config-sample.php</code> as <code>config.php</code>. </li> <li>Add connections for your source and output to <code>config.php</code>.</li> <li>See the options with <code>porter --help</code>.</li> </ol>"},{"location":"guide.html#basic-usage","title":"Basic Usage","text":"<p>It's normal for a migration to take a while. You're learning a new tool, and you might find bugs from edge cases in you content or more recent changes in the source or target software.  If you want free help, expect the back-and-forth to potentially take months depending on the scope of the issues and volunteer availability. If you're in a hurry, contract a developer to manage the process for you. As usual, mind the axiom: \"You can have it fast, good, or cheap \u2014 pick 2.\"</p>"},{"location":"guide.html#get-oriented","title":"Get oriented","text":"<p>Get the \"short\" names of the packages and connections you want to use.</p> <p>Run <code>porter list</code> and then choose whether to list: * sources [<code>s</code>] \u2014 Package names you can migrate from * targets [<code>t</code>] \u2014 Package names you can migrate to * connections [<code>c</code>] \u2014 What's in your config (did you make one?)</p> <p>Note the bolded values without spaces or special characters. Those are the <code>&lt;name&gt;</code> values you need next.</p>"},{"location":"guide.html#check-support","title":"Check support","text":"<p>What can you migrate? Find out!</p> <p>Run <code>porter show source &lt;name&gt;</code> and <code>porter show target &lt;name&gt;</code> to see what feature data is supported by the source and target. Data must be in both for it to migrate.</p>"},{"location":"guide.html#optional-install-the-target-software","title":"Optional: Install the target software","text":"<p>Nitro Porter tends to work the smoothest when you pre-install the new software so its database tables preexist when running the migration. However, it should also work without doing this, so keep reporting issues in either scenario.</p>"},{"location":"guide.html#run-the-migration","title":"Run the migration","text":"<p>Use <code>porter run --help</code> for a full set of options (including shortcodes).</p> <p>A very simple run might look like:  <pre><code>porter run --source=&lt;name&gt; --input=&lt;connection&gt; --target=&lt;name&gt;\n</code></pre></p> <p>Example A: Export from Vanilla in <code>example_db</code> to Flarum in <code>test_db</code>: <pre><code>porter run --source=Vanilla --input=example_db --target=Flarum --output=test_db\n</code></pre></p> <p>Example B: Export from XenForo in <code>example_db</code> to Flarum in the same database, using shortcodes: <pre><code>porter run -s Xenforo -i example_db -t Flarum\n</code></pre></p>"},{"location":"guide.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide.html#command-porter-not-found","title":"Command 'porter' not found","text":"<p>Verify Composer is in your PATH with <code>echo $PATH</code>. On MacOS, you should see <code>/Users/{username}/.composer/vendor/bin</code> in there somewhere.</p>"},{"location":"guide.html#follow-the-logs","title":"Follow the logs","text":"<p>Nitro Porter logs to <code>porter.log</code> in its installation root (e.g. <code>~/.composer/vendor/prosembler/nitro-porter</code> on MacOS). Open it with your favorite log viewer to follow along with its progress.</p>"},{"location":"guide.html#database-table-prefixes","title":"Database table prefixes","text":"<p>Try using the same database as both source &amp; target. Nitro Porter works well with multiple platforms installed in the same database using unique table prefixes.</p> <p>Currently, it can only use the system default table prefix for targets, but you can customize the source prefix. It uses <code>PORT_</code> as the prefix for its intermediary work storage. You can safely delete the <code>PORT_</code> tables after the migration.</p>"},{"location":"history.html","title":"History of Nitro Porter","text":"<p>Nitro Porter was created in 2010 at Vanilla Forums, Inc. as \"Vanilla Porter\". Originally designed as a single-file \"lifeboat\" for rescuing forum data on older webservers, it morphed into an efficient CLI-based export tool.</p> <p>It was frequently over-engineered to bring as much data as possible and to prove what was possible, not just check a box, because the team believed in the importance of community history.</p> <p>The first several versions only exported to the Vanilla flat file format, which then Vanilla core would import and do final data manipulations. Lincoln built the first source package for vBulletin, and several other engineers (both internal to Vanilla and OSS contributors) built additional packages.</p> <p>Over a decade, export (\"source\") support was added for many forum packages, eventually exceeding thirty platforms. It was even used by a Vanilla competitor for its ability to export reliably from so many systems.</p> <p>This unique history allowed hundreds of small details to accumulate in the logic, making it not only irreplaceable, but a knowledge repository as much as a code one. Nitro Porter doesn't just contain a set of simple data mappings, it contains a detailed record of how Web software databases evolved over decades and accounts for each change in detail.</p> <p>By late 2019, Vanilla had ceased creating packaged open source releases and Vanilla Porter was receiving only minimal updates.</p> <p>On 27 September 2021, Lincoln forked the project as Nitro Porter and rebuilt it into a general-purpose migration pipeline. It continues to use Vanilla's database schema as an intermediary format to allow backwards compatibility with the source packages already created.</p> <p>In 2022, this documentation site launched and Flarum was added as the second available target. Source support was added for Flarum, Kunena, MVC and Q2A. ASP Playground source support was improved. Source support for Vanilla's Advanced Editor (Quill-based WYSIWYG) was added.</p> <p>From 2023-24, Waterhole was added as a target. Source support for IPB4 was added. Nitro Porter got enhanced CLI support and went CLI-only (removing the Web GUI). And, the maintainer guide was created.</p>"},{"location":"maintain.html","title":"Maintainer Guide","text":"<p>Mastered the User Guide and Developer Guide  and ready to help with core Nitro Porter work? Buckle up.</p>"},{"location":"maintain.html#setup","title":"Setup","text":"<p>You'll want to clone the repo and run <code>composer install</code> on it.  This will include the development dependencies you'll need.</p> <p>You can optionally copy <code>phpstan.neon.dist</code> and <code>phpunit.xml.dist</code>, removing the <code>.dist</code> from both,  to customize them as needed (without committing them \u2014 they are ignored by git).</p>"},{"location":"maintain.html#quality-tools","title":"Quality Tools","text":"<ul> <li><code>composer lint</code> runs linting (PHPCS) with the PSR12 standard.</li> <li><code>composer delint</code> runs a fix for linting issues (PHPCBF). It does its best.</li> <li><code>composer stan</code> runs static analysis (PHPStan) as defined in <code>phpstan.neon.dist</code>.</li> </ul> <p>PHPStan is currently at level 6 with exceptions for the deprecated <code>src/Database</code>, the <code>src/Source/*</code> packages that need updating (still at level 5), and rule <code>missingType.iterableValue</code> which wants <code>mixed[]</code> all over the docblocks (which should get solved with nicer array use / reducing usage of them, which should likely wait for the previous 2 issues to get updated). Those same issues are the primary hurdles to level 7, it seems.</p>"},{"location":"maintain.html#testing-tools","title":"Testing Tools","text":"<p>Use <code>composer test</code> to run the unit test suite (only \u2014 see <code>phpunit.xml.dist</code>). This runs in the CI pipeline.</p> <p>Use <code>composer testall</code> to also run integration tests. It runs mock data tests against databases and takes more time to run. It does NOT run in the CI pipeline.</p> <p>This project desperately needs more integration tests that simulate an actual migration.  Faker &amp; Phinx are available for this purpose (see <code>composer phinx</code> and <code>composer seed</code>).</p>"},{"location":"maintain.html#commits-prs","title":"Commits &amp; PRs","text":"<p>You must use <code>fix:</code> and <code>feat:</code> prefixes on your commit messages for the changelog automation to work.</p> <p>Please use thoughtful, concise commit messages and make use of rebase &amp; squash when preparing a pull request if you're able.</p> <p>Our unit of work is the commit, not the PR.  It is therefore preferable to have multiple atomic commits than to squash an entire complex PR into 1 commit. If you don't know what this means, that's OK! You can contribute anyway and we'll figure it out as we go.</p>"},{"location":"maintain.html#releases","title":"Releases","text":"<p>Use <code>composer changelog</code> to run <code>conventional-changelog</code>, which will update the <code>CHANGELOG.md</code>.  We use semantic versioning.  If there are <code>feat:</code> commits since the last tag, it will assume a minor-point release. Otherwise, it will assume a patch-level release.</p> <p>Create a git tag in the form <code>v0.0.0</code> to start a new release and finish the process on GitHub.</p> <p>Ready-built ZIP files are distributed on GitHub with each release.  Build them with <code>composer build</code>, which triggers a Phing build in <code>/build/current</code>. You will need to manually compress the generated folder into a ZIP.</p>"},{"location":"maintain.html#build-docs-localhost","title":"Build Docs (localhost)","text":"<p>This is an advanced setup NOT required to contribute to the docs. It simply lets you run the documentation website on your localhost.</p> <p>Install MkDocs Material and necessary plugins. On MacOS, use <code>pip3</code> instead of <code>pip</code>:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>From the root of this repo, start the built-in webserver to preview your work on the documentation:</p> <pre><code>mkdocs serve\n</code></pre> <p>You should now be able to view the docs at: <code>http://127.0.0.1:8000/</code> (paste it in your browser).</p> <p>To stop serving, use <code>Ctrl + C</code> or close the Terminal window. To restart, just use <code>mkdocs serve</code> again.</p>"},{"location":"maintain.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"maintain.html#command-not-found-mkdocs","title":"command not found: mkdocs","text":"<p>If you get this on MacOS, it's likely not in your <code>PATH</code>. Take the output of <code>python3 -m site --user-base</code> and add <code>/bin</code> to it (ex: <code>/Users/linc/Library/Python/3.9/bin</code>), add that as a new line in <code>/etc/paths</code> (requires <code>sudo</code>), and restart Terminal.</p>"},{"location":"maintain.html#error-config-file-mkdocsyml-does-not-exist","title":"Error: Config file 'mkdocs.yml' does not exist.","text":"<p>You are not in the root of this repo. Use the <code>cd</code> command to move there.</p>"},{"location":"migrations.html","title":"Community Migrations","text":"<p>Running a seamless community platform is quite challenging. Here's some suggestions for making yours successful.</p>"},{"location":"migrations.html#explain-the-migration-to-your-community","title":"Explain the migration to your community","text":"<p>Weeks or months before your migration, explain the motivations and what value you think the community will get from the migration. Many folks don't like change, so giving them time to process, ask questions, and maybe even vent a bit are a normal part of the process. You might also learn some things about how your community is using the current software so you can adapt your plans.</p>"},{"location":"migrations.html#get-power-users-to-test-the-new-software","title":"Get power users to test the new software","text":"<p>Days or weeks before your migration, invite \"power users\" of your community to try out a staged copy of it. Solicit feedback and see if there are things you can do to address concerns. </p>"},{"location":"migrations.html#do-a-test-run","title":"Do a test run","text":"<p>Never \"just do\" a migration. They're very, very complex. Take some dedicated time to do a test run and then ideally have multiple folks looking for issues.</p>"},{"location":"migrations.html#set-up-redirects-for-everything-possible","title":"Set up redirects for everything possible","text":"<p>Creating 301 redirects between old and new content (so that old bookmarks and links still function as expected) are a huge boon to both your everyday users and maintaining your position in search results.</p>"},{"location":"migrations.html#move-files-in-advance-if-you-can","title":"Move files in advance if you can","text":"<p>If your community uploads images or files, these are typically many times the storage space of the database (content) and will take much longer to transfer between servers. Don't save it for the end. If you can iteratively move files ahead of time and then only move files uploaded in the last few days at the time of migration, that's ideal. If that's too complex, just move them all at once as soon as you put the site in maintenance mode for the final migration.</p>"},{"location":"migrations.html#minimize-downtime","title":"Minimize downtime","text":"<p>Try to restrict downtime to a day or less. If possible, use a maintenance mode that simply prevents new content from being added instead of completely blocking access while the migration is in progress.</p>"},{"location":"migrations.html#avoid-complexity-like-deltas","title":"Avoid complexity (like deltas)","text":"<p>If you're moving a database between systems, do it all at once. Don't try to do most of it sooner and then only recent content for the final migration. It's worlds more complex.</p>"},{"location":"migrations.html#give-folks-a-channel-for-feedback","title":"Give folks a channel for feedback","text":"<p>After the migration, continue collecting feedback for 4-6 weeks. Folks will discover new issues and this is a prime opportunity to hear about how the new software is working for them and how things could be improved.</p>"},{"location":"migrations.html#dont-panic-but-address-what-you-can","title":"Don't panic, but address what you can","text":"<p>Don't take all the feedback and bury it! Be selective, but do improve things where you can easily do so. It will strengthen your community.</p>"},{"location":"sources.html","title":"Sources","text":"Supported Sources Data UsersCategoriesDiscussionsCommentsRolesPasswordsPrivate MessagesAttachmentsBookmarksAvatarsSignaturesPollsTagsReactionsBadgesUser NotesRanksAdvanced Forum 7.x-2.*\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717answerhub\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2713\u2717\u2717\u2717\u2717\u2713\u2717\u2717\u2717\u2717ASP Playground\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717bbPress 1\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717bbPress 2\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717CodoForum\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717Drupal 6\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717Drupal 7\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717esoTalk\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717Expression Engine Discussion Forum\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717Flarum\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2713\u2717\u2717FluxBB 1\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717FuseTalk\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717IP.Board 3\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717jforum\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717Joomla Kunena\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717.mbox files\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717MODX Discuss Extension\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717MVC\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2713\u2713\u2717\u2713\u2717\u2713\u2717\u2717MyBB\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717NodeBB 0.*\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717phpBB 2\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717phpBB 3\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2713\u2713PunBB 1\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717Questions2Answers\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717SimplePress 1\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717Simple Machines 1\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717Simple Machines 2\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717Toast\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2717User Voice\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717Vanilla 1\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717\u2717\u2717Vanilla 2+\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713vBulletin 3 &amp; 4\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713vBulletin 5 Connect\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2717\u2717\u2717\u2717\u2717Web Wiz Forums\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717Xenforo\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2713\u2713\u2717\u2717\u2717\u2717\u2717\u2717YAF.NET\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2717\u2717\u2717\u2713\u2717\u2717\u2717\u2717\u2717\u2713"},{"location":"targets.html","title":"Targets","text":"Supported Targets Data Users Categories Discussions Comments Roles Passwords Private Messages Attachments Bookmarks Avatars Signatures Polls Tags Reactions Badges User Notes Ranks Vanilla (file) \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Flarum \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2717 \u2713 \u2717 \u2713 \u2713 \u2717 \u2717 Waterhole \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717"}]}